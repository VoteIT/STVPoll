import json
import os
from random import seed
from unittest import TestCase

from stvpoll.scottish_stv import ScottishSTV


def _big_fixture(candidates: int, seats: int) -> ScottishSTV:
    with open("stvpoll_testing/70 in 35.json") as infile:
        vote_data = json.load(infile)
    obj = ScottishSTV(candidates=vote_data["candidates"][:candidates], seats=seats)
    for b in vote_data["ballots"]:
        obj.add_ballot(b, 1)
    return obj


class ScottishElectionTests(TestCase):
    ward_winners = (
        {"Kevin  LANG", "Louise YOUNG", "Graham HUTCHISON", "Norrie WORK"},
        {"Graeme BRUCE", "Neil GARDINER", "Ricky HENDERSON", "Susan WEBBER"},
        {"Robert Christopher ALDRIDGE", "Claire BRIDGMAN", "Mark BROWN"},
        {"Eleanor BIRD", "Jim CAMPBELL", "Cammy DAY", "George GORDON"},
        {"Gavin BARRIE", "Max MITCHELL", "Hal OSLER", "Iain  WHYTE"},
        {"Scott DOUGLAS", "Gillian GLOYER", "Frank ROSS"},
        {"Denis DIXON", "Catherine FULLERTON", "Ashley GRACZYK", "Donald WILSON"},
        {"Scott ARTHUR", "Phil DOGGART", "Jason RUST"},
        {"Gavin CORBETT", "Andrew JOHNSTON", "David KEY"},
        {"Nick COOK", "Melanie MAIN", "Neil ROSS", "Mandy WATT"},
        {"Karen DORAN", "Claire MILLER", "Jo MOWAT", "Alasdair RANKIN"},
        {"Marion DONALDSON", "Amy MCNEESE-MECHAN", "Susan RAE", "Lewis RITCHIE"},
        {"Chas BOOTH", "Adam MCVEY", "Gordon John MUNRO"},
        {"Ian CAMPBELL", "Joan GRIFFITHS", "John MCLELLAN", "Alex STANIFORTH"},
        {"Steve BURGESS", "Alison DICKIE", "Ian PERRY", "Cameron ROSE"},
        {"Lezley Marion CAMERON", "Derek HOWIE", "Lesley MACINNES", "Stephanie SMITH"},
        {"KATE CAMPBELL", "MARY CAMPBELL", "Maureen CHILD", "Callum LAIDLAW"},
    )

    def test_big(self):
        """Example using big autogenerated dataset"""
        seed(42)
        poll = _big_fixture(candidates=70, seats=34)
        result = poll.calculate()
        self.assertIs(result.as_dict()["complete"], True)
        self.assertEqual(
            list(result.as_dict()["rounds"][-1]["vote_count"].values())[7],
            2.03862,
        )

    def test_all(self):
        election_dir = "stvpoll_testing/scottish_election_data/"
        for f in os.listdir(election_dir):
            ballots = []
            candidates = []
            with open(election_dir + f) as edata:
                standing, winners = map(int, edata.readline().strip().split(" "))
                while True:
                    line = edata.readline().strip().split(" ")
                    if line[0] == "0":
                        break
                    count = int(line.pop(0))
                    line.pop()
                    ballots.append((map(int, line), count))
                for i in range(standing):
                    candidates.append(edata.readline().strip()[1:-1])

            poll = ScottishSTV(winners, candidates)
            for b in ballots:
                poll.add_ballot([candidates[i - 1] for i in b[0]], b[1])
            result = poll.calculate()
            ward_number = int(f.split("_")[1])
            self.assertEqual(
                result.elected_as_set(), self.ward_winners[ward_number - 1]
            )
